#!/bin/bash

if [ $# -lt 2 ] ; then
    echo "Usage; ./run {rsort|sol|wc|clean|grep|pv|visitor|rcount} [#iterations]"
    exit 1
fi 

APP=$1
ITERATIONS=$2
STORM_UI_SERVER=nimbus1:8080
FIRST_INTERVAL_SEC=60
METRICS_INTERVAL_SEC=30

declare -a comps        # components
declare -a results      # results

function sum_kafka_out() {
    # compute the total network traffic coming out of Kafka
    kafka_out=`find $1 -name ipmon.log | grep slave | xargs grep kafka1,  | awk -F ', ' '{print $4"\n"}' | awk '{sum += $1} END {printf "%.5f", (sum/1024/1024)}'`
}

function join_by { local IFS="$1"; shift; echo "$*"; }

case $APP in
    rsort)
        comps=("spout" "sort")
        ;;
    sol)
        comps=("spout" "bolt")        
        ;;
    wc)
        comps=("spout" "split" "count")
        ;;
    clean)
        comps=("spout" "view" "filter")
        ;;
    grep)
        comps=("spout" "find" "count")
        ;;
    pv)
        comps=("spout" "view" "count")
        ;;
    visitor)
        comps=("spout" "view" "uniquer")
        ;;
    rcount)
        comps=("spout" "split" "rolling_count")
        ;;
esac
    

wget http://${STORM_UI_SERVER}/api/v1/topology/summary

topo_id=`cat summary | jq '.topologies[].id' | tr -d '"'`
if [[ ${topo_id} == "" ]] ; then
    echo "Topology is not running. Abort."
    exit 1
fi

echo ${topo_id}
mkdir ${topo_id}
mv summary ${topo_id}

for comp in ${comps[@]}; do
    echo $comp
    wget http://${STORM_UI_SERVER}/api/v1/topology/${topo_id}/component/${comp}
    mv $comp ${topo_id}
done

echo ''
echo 'Waiting for the first metrics sampling...'
sleep ${FIRST_INTERVAL_SEC}

echo ''
echo "Getting metrics for ${APP} (1/${ITERATIONS})..."
echo ''
./get_metrics ${topo_id}/1 true
sum_kafka_out ${topo_id}/1
results+=(${kafka_out})

for ((i=2; i <= $ITERATIONS; i++)) ; do
    echo ''
    echo 'Waiting for the next metrics sampling...'
    sleep ${METRICS_INTERVAL_SEC}
    echo ''
    echo "Getting metrics for ${APP} ($i/${ITERATIONS})..."
    ./get_metrics ${topo_id}/$i false
    sum_kafka_out ${topo_id}/$i
    results+=(${kafka_out})
done

echo ''
echo 'All done!'

echo ''
join_by $'\t' "${results[@]}"
    
