#!/bin/bash

source ./bench.conf

JAR="${STORM_BENCH_HOME}/target/storm-bench-0.1-jar-with-dependencies.jar"
CONF="${STORM_BENCH_HOME}/conf/conf.yaml"
PACKAGE="rpi.storm.benchmark"
CORES_PER_VM=2

NUM_TESTS=2
NUM_SAMPLING=3   # sampling per test
SAMPLING_PERIOD_SEC=15
SAMPLING_INTERVAL_SEC=20

HOSTS_FILE=./hosts
TCPDUMP="${REMOTE_DIR}/tcpdump"
TCPDUMP_FILTER=="${REMOTE_DIR}/tcpdump_filter"

POST_RUN_SUPERVISOR_WAIT_SEC=20
POST_KILL_SUPERVISOR_WAIT_SEC=20


###### misc functions

function join_by { local IFS="$1"; shift; echo "$*"; }

function run_cmd { echo $1; eval $1; }

function run_pssh {
    local remote_cmd=$1
    local cmd="pssh -l ${REMOTE_USER} -h ${HOSTS_FILE} \"${remote_cmd}\""
    run_cmd $cmd
}


###### run_supervisors & kill_supervisors

function run_supervisors {
    local m
    if [ $# -eq 0 ] || [ ${#1} -gt 3 ] ; then
        echo "Usage: ./run_supervisor [1-128]"
        exit 1
    elif [ ${#1} -eq 1 ] ; then
        m=00$1
    elif [ ${#1} -eq 2 ] ; then
        m=0$1
    elif [ ${#1} -eq 3 ] ; then
        m=$1
    fi
    echo "Starting $m supervisors..."
    # pdsh -R ssh -l ${REMOTE_USER} -w slave[001-$m] 'sudo rm -rf /app/storm; sudo mkdir -p /app/storm; sudo chown -R ${REMOTE_USER}:${REMOTE_USER} /app/storm; /usr/local/storm/bin/storm supervisor < /dev/null > /home/${REMOTE_USER}/supervisor.log 2>&1 &'

    echo "Saving current supervisors..."
    echo $m > ./supervisors
}


function kill_supervisors {
    local m
    m=`cat ./supervisors`
    echo "Killing ${m} supervisors"
    # pdsh -R ssh -l ${REMOTE_USER} -w slave[001-$m] 'pkill java'
}


###### run_topo & kill_topo

function run_topo {
    if [ $# -ne 2 ] ; then
        echo "Usage: run_topo {rsort|sol|wc|clean|grep|pv|visitor|rcount} [#VMs(m)]"
        exit 1    
    fi

    local class
    local topo
    local topic
    local num_comps

    case "$1" in
        rsort)
            class=RollingSort
            topo=rollingsort
            topic=rand
            num_comps=2
            ;;
        sol)
            class=SOL
            topo=sol
            topic=bytes
            num_comps=2
            ;;
        wc)
            class=WordCount
            topo=wordcount
            topic=book
            num_comps=3
            ;;
        clean)
            class=DataClean
            topo=dataclean
            topic=view
            num_comps=3
            ;;
        grep)
            class=Grep
            topo=grep
            topic=book
            num_comps=3
            ;;
        pv)
            class=PageViewCount
            topo=pageviewcount
            topic=view
            num_comps=3
            ;;
        visitor)
            class=UniqueVisitor
            topo=uniquevisitor
            topic=view
            num_comps=3
            ;;
        rcount)
            class=RollingCount
            topo=rollingcount
            topic=book
            num_comps=3
            ;;
    esac

    echo "Submitting ${topo}..."

    local parallel=$[$2 * ${CORES_PER_VM} / ${num_comps}]
    if [ $parallel -lt 1 ] ; then
        parallel=1
    fi;
    local workers=$2
    local ackers=$2

    run_cmd "storm jar ${JAR} ${PACKAGE}.${class} ${topo} -conf ${CONF} -topic ${topic} -parallel ${parallel} -workers ${workers} -ackers ${ackers}"

    echo ${topo} > ./topo
}


function kill_topo {
    local topo
    case "$1" in
        rsort)
            topo=rollingsort
            ;;
        sol)
            topo=sol
            ;;
        wc)
            topo=wordcount
            ;;
        clean)
            topo=dataclean
            ;;
        grep)
            topo=grep
            ;;
        pv)
            topo=pageviewcount
            ;;
        visitor)
            topo=uniquevisitorp
            ;;
        trident)
            topo=tridentwordcount
            ;;
        rcount)
            topo=rollingcount
            ;;
        *)
            topo=`cat ./topo`
            ;;
    esac

    echo "Killing ${topo}..."
    run_cmd "storm kill -w 0 ${topo} || true"
}


###### sample_metrics

function sample_metrics {
    local output_dir
    if [ $# -eq 0 ] ; then
        output_dir="output"
    else
        output_dir=$1
    fi
    
    echo 'Start sampling'
    run_cmd "ssh ${REMOTE_USER}@${TCPDUMP_HOST} \"sudo ${TCPDUMP} -i eth0 -Q out -F ${TCPDUMP_FILTER} --throughput-tracking-mode >& tcpdump.log\""
    run_pssh "sudo ${REMOTE_DIR}/sysmon 0 ${REMOTE_DIR}/sysmon.log 0x48040020 10000 2 > /dev/null &"

    echo ''
    echo 'Monitoring in progress...'
    sleep ${SAMPLING_PERIOD_SEC}

    run_cmd "ssh ${REMOTE_USER}@${TCPDUMP_HOST} \"sudo pkill --signal 2 tcpdump\""
    run_pssh "sudo pkill --signal 2 sysmon"
    echo ''
    echo 'Done testing! Collecting metrics...'

    if [ ! -d "${output_dir}" ]; then
        mkdir -p ${output_dir}
    else
        rm -rf ${output_dir}/*
    fi

    run_cmd "scp ${REMOTE_USER}@${TCPDUMP_HOST} ${REMOTE_DIR}/tcpdump.log ${output_dir}/"
    run_cmd "pslurp -l ${REMOTE_USER} -h ${HOSTS_FILE} -L ${output_dir} ${REMOTE_DIR}/sysmon.log ."

    echo ''
    echo 'Done sampling'
}


###### run_test

function create_hosts_file {
    if [ $# -ne 1 ] ; then
        echo "Usage: create_hosts_file [#VMs(m)]"
        exit 1
    fi
    local m=$1

    if [ -f ${HOSTS_FILE} ] ; then 
        rm ${HOSTS_FILE}
    fi
    touch ${HOSTS_FILE}

    local host, i
    for host in ${HOSTS[@]}; do
        echo $host >> ${HOSTS_FILE}
    done
    for ((i=1; i <= $m; i++)) ; do
        printf "slave%03d\n" $i >> ${HOSTS_FILE}
    done
}


function create_tcpdump_filter {
    if [ $# -ne 1 ] ; then
        echo "Usage: create_tcpdump_filter [#VMs(m)]"
        exit 1
    fi
    local m=$1

    if [ -f ${TCPDUMP_FILTER} ] ; then 
        rm ${TCPDUMP_FILTER}
    fi
    touch ${TCPDUMP_FILTER}

    local slaves=()
    for ((i = 1; i <= $m; i++) ; do
        slaves+=(`printf "slave%03d"`)
    done
    
    echo "dst " > ${TCPDUMP_FILTER}
    join_by ' or ' ${slaves[@]} >> ${TCPDUMP_FILTER}
}


function do_test() {
    if [ $# -ne 2 ] ; then
        echo "Usage: do_test [app] [output directory]"
        exit 1
    fi

    local app=$1
    local out_dir=$2
    local comps=()

    case $app in
        rsort)
            comps=("spout" "sort")
            ;;
        sol)
            comps=("spout" "bolt")        
            ;;
        wc)
            comps=("spout" "split" "count")
            ;;
        clean)
            comps=("spout" "view" "filter")
            ;;
        grep)
            comps=("spout" "find" "count")
            ;;
        pv)
            comps=("spout" "view" "count")
            ;;
        visitor)
            comps=("spout" "view" "uniquer")
            ;;
        rcount)
            comps=("spout" "split" "rolling_count")
            ;;
    esac

    echo ''
    echo "Getting topology info ${app}..."

    wget http://${STORM_UI_SERVER}/api/v1/topology/summary
    local summary
    # summary can be saved as summary.1
    if [ -f "summary" ] ; then
        summary="summary"
    elif [ -f "summary.1" ] ; then
        summary="summary.1"
    else
        echo "Summary file not found. Abort."
        exit 1        
    fi

    local topo_id=`cat ${summary} | jq '.topologies[].id' | tr -d '"'`
    if [[ ${topo_id} == "" ]] ; then
        echo "Topology is not running. Abort."
        exit 1
    fi

    echo ${topo_id}
    local topo_out_dir=${out_dir}/${topo_id}
    mkdir -p ${topo_out_dir}
    mv ${summary} ${topo_out_dir}

    for comp in ${comps[@]}; do
        echo $comp
        wget http://${STORM_UI_SERVER}/api/v1/topology/${topo_id}/component/${comp}
        mv $comp ${topo_out_dir}
    done

    local i
    for ((i=1; i <= ${NUM_SAMPLING}; i++)) ; do
        echo "Sampling metrics ($i/${NUM_SAMPLING})..."
        sample_metrics ${topo_out_dir}/$i
        local kafka_throughput=`tail -n1 ${topo_out_dir}/$i/tcpdump.log | cut -d' ' -f9`
        echo "Kafka throughput = ${kafka_throughput}"
        test_results+=(${kafka_throughput})

        if [ $i -eq {NUM_SAMPLING} ] ; then
            break
        fi

        echo ''
        echo 'Waiting for the next metrics sampling...'
        sleep ${SAMPLING_INTERVAL_SEC}
        echo ''
    done
}


function run_test {
    if [ $# -ne 3 ] ; then
        echo "Usage; ./run {rsort|sol|wc|clean|grep|pv|visitor|rcount} [#VMs(m)]"
        exit 1    
    fi
    
    local app=$1, m=$2
    echo "Start testing ${app} with m = ${m}"

    local out_dir=${OUTPUT_DIR}/${app}/`printf "%03dvm" $m`
    echo ''
    echo "Creating output dir: ${out_dir}"
    mkdir -p ${out_dir}

    echo "Creating and copying hosts file..."
    create_hosts_file
    pscp -l ${REMOTE_USER} -h ${HOSTS_FILE} ${HOSTS_FILE} ${REMOTE_DIR}

    local i
    for ((i=1; i <= $NUM_TESTS; i++)) ; do
        echo ''
        echo "====== Starting test ($i/${NUM_TESTS}) ======"
        echo ''

        run_topo $app $m

        echo ''
        echo "Waiting $app to start up..."
        run_cmd "sleep ${DELAY_BEFORE_TOPO_START_SEC}"

        do_test ${out_dir}

        echo ''
        echo "====== Testing done ($i/${NUM_TESTS}) ======"

        kill_topo

        if [ $i -eq $NUM_TESTS ] ; then
            break
        fi

        echo ''
        echo "Sleeping before the next test"
        sleep ${TEST_INTERVAL_SEC}
    done

    echo ''
    echo "Testing ${app} with m = ${m} done!!"

	echo $app\t$vm\t`join_by $'\t' ${test_results[@]}` >> ${out_dir}/results
}
